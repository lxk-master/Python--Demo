'''
概念:
    子类可以有多个父类,并且具有所有父类的属性和方法
    例如: 孩子会继承自己父亲和母亲的特性

语法:
    class 子类名(父类1, 父类2...)
        pass

多继承使用注意事项:
    调用顺序与继承顺序有关系
    如果父类之间存在同名的属性或方法,应尽量避免使用多继承




Python中的MRO --方法搜索顺序
    Python中针对类提供了一个内置属性  __mro__ 可以查看方法的搜索顺序
    MRO 是 method resolution order,  主要用于在多继承时判断方法、属性的调用路径

    语法:
        print(C.__mro__)
    输出结果
        (<class '__main__.C'>, <class '__main__.B'>, <class '__main__.A'>, <class 'object'>)

    说明
        在搜索方法时,是按照 __mro__ 的输出结果从左至右的顺序查找的
        如果在当前类中找到方法,直接执行,不再搜索
        如果没有找到,就查找下一个类中是否有对应方法,如果找到,直接执行,不再搜索
        如果找到最后一个类,还没有找到方法,程序报错
'''



'''
新式类和旧式(经典)类
    Object是Python为所有对象提供的基类,提供有一些内置的属性和方法,可以使用dir函数查看
    
    概念:
        新式类:
            以object为基类的类,推荐使用
        经典类:
            不以object为基类的类,不推荐使用
    
    在Python3.x中定义类时,如果没有指定父类,会默认使用object作为该类的基类 --- Python3.x中定义的类都是新式类
    在Python2.x中定义类时,如果没有指定父类,则不会以object作为基类
    
    影响:
        新式类和经典类在多继承时会影响到方法的搜索顺序
    
    为了保证编写的代码能够同时在Python3.x和Python2.x中运行
        今后在定义类时,如果没有父类,建议统一继承自object ---如果程序需要在Python2.x中运行,建议手动添加object
            class 类名(object):
                pass
    

'''