# 在Python中,可以通过center、ljust、rjust方法做居中、左对齐和右对齐的处理,如果要在字符串的左侧补零,也可以使用zfill方法

s = 'hello, world'
# center方法以宽度20将字符串居中并在两侧填充*
print(s.center(20,'*')) # ****hello, world****
# 用len方法计算字符串长度
print(len(s.center(20,'*')))
# rjust方法以宽度20将字符串右对齐并在左侧填充空格
print(s.rjust(20)) #       hello, world
# ljust方法以宽度20将字符串左对齐并在右侧填充-
print(s.ljust(20, '-')) # hello, world------
# 在字符串的左侧补零
print('33'.zfill(5)) # 00033
# 支持 负号 -
print('-33'.zfill(5)) # -0033


# 在用prin函数输出字符串时,可以用下面的方式对字符串进行格式化
a = 321
b = 123
print('%d, %d = %d' % (a, b, a*b))
# 也可以用字符串的方法来完成字符串的格式, format方式是格式化的方法
print('{0}, {1} = {2}'.format(a, b, a * b))
# f表达式: 从Python3.6开始,格式化字符串有更简洁的书写方式: 在字符串前加上f来格式化字符串.在这种f打头的字符串中{变量名}是一个占位符,会被变量对应的值将其替换掉
print(f'{a} * {b} = {a * b}')

'''
如果需要进一步控制格式化语法中变量的形式,可以参照下面的表格来进行字符串格式化操作
变量值                     占位符                     格式化结果                       说明
3.1415926                 {:.2f}                    '3.14'                      保留小数点后两位
3.1415926                 {:+.2f}                   '+3.14'                     带符号保留小数点后两位
-1                        {:+.2f}                   '-1.00'                     带符号保留小数点后两位
3.1415926                 {:.0f}                    '3'                         不带小数
123                       {:0>10d}                  '0000000123'                左边补0,补够10位
123                       {:x<10d}                  '123xxxxxxx'                右边补x,补够10位
123                       {:>10d}                   '       123'                左边补空格,补够10位
123                       {:<10d}                   '123       '                右边补空格,补够10位
123456789                 {:,}                      '123,456,789'               逗号分隔式
0.123                     {:.2%}                    '12.30%'                    百分比格式
123456789                 {:.2e}                    ‘1.23e+08’                  科学技术法格式
'''
# 三种运行方式
ss = 3.1415926
print('%.2f' % ss)
print('{:.2f}'.format(ss))
print(f'{ss:.2f}')